--Reach a Number

You are standing at position 0 on an infinite number line. There is a goal at position target.

On each move, you can either go left or right. During the n-th move (starting from 1), you take n steps.

Return the minimum number of steps required to reach the destination.

Example1

Input: target = 3
Output: 2
Explanation:
On the first move we step from 0 to 1.
On the second step we step from 1 to 3.
Example2

Input: target = 2
Output: 3
Explanation:
On the first move we step from 0 to 1.
On the second move we step  from 1 to -1.
On the third move we step from -1 to 2.

public class Solution {
    /**
     * @param target: the destination
     * @return: the minimum number of steps
     */
    public int reachNumber(int target) {
        target = Math.abs(target);
        
        int step = 1, pos = 0;
        while (pos < target) {
            pos += step;
            step++;
        }
        step--;
        
        if (pos == target) return step;
        
        pos -= target;
        if (pos % 2 == 0) {
            return step;
        } else if ((step + 1) % 2 == 1) {
            return step + 1;
        } else {
            return step + 2;
        }
    }
}


--Count Different Palindromic Subsequences

Given a string S, find the number of different non-empty palindromic subsequences in S, and return that number modulo 10^9 + 7.

A subsequence of a string S is obtained by deleting 0 or more characters from S.
A sequence is palindromic if it is equal to the sequence reversed.

Two sequences A[1], A[2], ... and B[1], B[2], ... are different if there is some i for which A[i] != B[i].

Example
Given S = "bccb", return 6
Explanation:
The 6 different non-empty palindromic subsequences are b, c, bb, cc, bcb, bccb.
Note that bcb is counted only once, even though it occurs twice.

Given S = "abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba" return 104860361
Explanation:
There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 10^9 + 7.

public class Solution {
    /**
     * @param str: a string S
     * @return: the number of different non-empty palindromic subsequences in S
     */
    public int countPalindSubseq(String str) {
        // write your code here
        if (str == null || str.length() == 0) {
            return 0;
        }
        if (str.length() == 1) {
            return 1;
        }
        int mod = 1000000007;
        int n = str.length();
        int[][] dp = new int[n][n];
        // dp[i][j] 记录 i-j 这个子串所能组成的数量
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        // 按长度递推
        for (int len = 2; len <= n; len++) {
            for (int i = 0; i + len - 1 < n; i++) {
                int j = i + len - 1;
                if (str.charAt(i) == str.charAt(j)) {
                    char c = str.charAt(i);
                    int left = i + 1, right = j - 1; // 找是不是有相同
                    while (left <= right && str.charAt(left) != c) {
                        left++;
                    }
                    while (left <= right && str.charAt(right) != c) {
                        right--;
                    }
                    // 注意范围检查，相等的时候也要试图走一走
                    // 这样就可以根据最终 left 和 right 的位置关系确定有没有相同字符了
                    if (left > right) { // 没有重复字符
                        dp[i][j] = 2 * dp[i + 1][j - 1] + 2;
                    } else if (left == right) { // 有一个重复字符
                        dp[i][j] = 2 * dp[i + 1][j - 1] + 1;
                    } else { // 有两个重复字符
                        dp[i][j] = 2 * dp[i + 1][j - 1] - dp[left + 1][right - 1];
                        // 注意这里不怕 left + 1 > right - 1
                        // 尽管是无效的，但是二维数组中保存了 0，也正是我们需要的
                    }
                } else {
                    dp[i][j] = dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1];
                }
                if (dp[i][j] < 0){
                    dp[i][j] += mod;
                } else{
                    dp[i][j] %= mod;
                }
            }
        }
        return dp[0][n - 1];
    }
}


--Rotate Bits - Left

Bit Rotation -—— A rotation (or circular shift) is an operation similar to shift except that the bits that fall off at one end are put back to the other end.

In left rotation, the bits that fall off at left end are put back at right end.

Let n is stored using 8 bits. Left rotation of n = 　11100101 by 3 makes n = 00101111 (Left shifted by 3 and first 3 bits are put back in last ). If n is stored using 16 bits or 32 bits then left rotation of n (000…11100101) becomes 00..0011100101000.

In this problem, you can assume that n was stored in 32 Bits

Example1

Input: n = 123, d = 4
Output: 1968
Explanation: 
0000,0000,0000,0000,0000,0000,0111,1010  -->  0000,0000,0000,0000,0000,0111,1010,0000
Example2

Input: n = 127, d = 8
Output: 32512
Explanation: 
0000,0000,0000,0000,0000,0000,1111,1111  -->  0000,0000,0000,0000,1111,1111,0000,0000

public class Solution {
    /**
     * @param n: a number
     * @param d: digit needed to be rorated
     * @return: a number
     */
    public int leftRotate(int n, int d) {
        // write code here
        String binary = Integer.toBinaryString(n);
        int i = 0;
        while (i <= 32 - binary.length()) {binary = "0" + binary;i++;}
        int shift = d % 32;
        String after = binary.substring(shift) + binary.substring(0,shift);
        //System.out.println(after);
        return Integer.parseInt(after, 2);
    }
}

--Next Sparse Number
A number is Sparse if there are no two adjacent 1s in its binary representation. Given a number n, find the smallest Sparse number which greater than or equal to n.
eg. 5 (binary representation: 101) is sparse, but 6 (binary representation: 110) is not sparse.

Given n = 6, return 8
Next Sparse Number is 8

Given n = 4, return 4
Next Sparse Number is 4

Given n = 38, return 40
Next Sparse Number is 40

Given n = 44, return 64
Next Sparse Number is 64

public class Solution {
    public int nextSparseNum(int x) {
        int i = 31;
        int y = 0;
        
        while (i >= 0) {
            int curr = (x >> i) & 1;
            int next = (i > 0) ? (x >> (i - 1)) & 1 : 0;
            
            y |= (curr << i);
            
            if (curr == 1 && next == 1) {
                x = (y + (y & (-y)));
                y = 0;
                i = 32;
            }
            
            i--;
        }
        
        return y;
    }
}

--Check Sum of K Primes

Given two numbers n and k. We need to find out if n can be written as sum of k prime numbers.

Given n = 10, k = 2
Return true   // 10 = 5 + 5

Given n = 2, k = 2
Return false

public class Solution {
    //https://www.geeksforgeeks.org/check-number-can-written-sum-k-prime-numbers/
    public boolean isSumOfKPrimes(int n, int k) {
        if (n < 2*k) {return false;}
        if (k == 1) {return isPrime(n);}
        if (k == 2) {
            if (n % 2 == 0) {
                return true;
            } else {
                return isPrime(n-2);
            }
        }
        
        return true;
    }
    
    boolean isPrime(int num) {
        if (num < 2)
            return false;
        for (int i = 2; i*i < num; ++i)
        {
            if (num%i == 0)
                return false;
        }
        return true;
    }
}

-- Counting Bits

Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.

Example1

Input: 5
Output: [0,1,1,2,1,2]
Explanation:
The binary representation of 0~5 is:
000
001
010
011
100
101
the count of "1" in each number is: 0,1,1,2,1,2
Example2

Input: 3
Output: [0,1,1,2]

public class Solution {
    /**
     * @param num: a non negative integer number
     * @return: an array represent the number of 1's in their binary
     */
    public int[] countBits(int num) {
        // write your code here
        int[] res = new int[num+1];
        
        for (int i = 1; i <= num; i++) {
            if (res[i] > 0) {continue;}
            if (i % 2 == 1) {
                res[i] = res[i-1] + 1;
            } else {
                res[i] = countbit(i);
            }
            
            int tmp = i;
            while (tmp <= num) {
                res[tmp] = res[i];
                tmp *= 2;
            }
        }
        
        return res;
    }
    
    int countbit (int i) {
        int cnt = 0;
        while (i >= 1) {
            cnt += i % 2;
            i /= 2;
        }
        return cnt;
    }
}

--Word Break II

Given a string s and a dictionary of words dict, add spaces in s to construct a sentence where each word is a valid dictionary word.

Return all such possible sentences.

Example
Gieve s = lintcode,
dict = ["de", "ding", "co", "code", "lint"].

A solution is ["lint code", "lint co de"].


public class Solution {
    /*
     * @param s: A string
     * @param wordDict: A set of words.
     * @return: All possible sentences.
     */
    public List<String> wordBreak(String s, Set<String> dict) {
        // write your code here
        List<String> rst = new ArrayList<>();
        if (s == null || s.length() == 0) {return rst;}
        
        Map<Integer, List<String>> mem = new HashMap<>();
        
        
        return dfs(s, 0, dict, mem);
    }
    
    List<String> dfs (String s, int index, Set<String> dict, Map<Integer, List<String>> mem) {
        if (mem.containsKey(index)) {
            return mem.get(index);
        }
        if (index >= s.length()) {
            return Arrays.asList("");
        }
        
        List<String> curResult = new ArrayList<>();
        for (int i = index; i < s.length(); i++) {
            String tmp = s.substring(index, i+1);
            if (dict.contains(tmp)) {
                List<String> result = dfs(s, i+1, dict, mem);
                if (result.size() != 0) {
                    for (String str : result) {
                        curResult.add(str.length() == 0 ? tmp : tmp + " " + str);
                    }
                }
            }
        }
        mem.put(index, curResult);
        return curResult;
    }
}

--Russian Doll Envelopes

You have a number of envelopes with widths and heights given as a pair of integers (w, h). One envelope can fit into another if and only if both the width and height of one envelope is greater than the width and height of the other envelope.

What is the maximum number of envelopes can you Russian doll? (put one inside other)

public class Solution {
    /*
     * @param envelopes: a number of envelopes with widths and heights
     * @return: the maximum number of envelopes
     */
    public int maxEnvelopes(int[][] envelopes) {
        // write your code here
        if(envelopes == null || envelopes.length == 0 
            || envelopes[0] == null || envelopes[0].length != 2)
            return 0;
        Arrays.sort(envelopes, new Comparator<int[]>(){
            public int compare(int[] arr1, int[] arr2){
                if(arr1[0] == arr2[0])
                    return arr2[1] - arr1[1];
                else
                    return arr1[0] - arr2[0];
            } 
        });
        int dp[] = new int[envelopes.length];
        int len = 0;
        for(int[] envelope : envelopes){
            int index = Arrays.binarySearch(dp, 0, len, envelope[1]);
                if(index < 0)
                    index = -index - 1;
            dp[index] = envelope[1];
            if (index == len)
                len++;
        }
        return len;
    
    }
}

--Word Squares

Given a set of words without duplicates, find all word squares you can build from them.

A sequence of words forms a valid word square if the kth row and column read the exact same string, where 0 ≤ k < max(numRows, numColumns).

For example, the word sequence ["ball","area","lead","lady"] forms a word square because each word reads the same both horizontally and vertically.

Example
Given a set ["area","lead","wall","lady","ball"]
return [["wall","area","lead","lady"],["ball","area","lead","lady"]]
Explanation:
The output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).

Given a set ["abat","baba","atan","atal"]
return [["baba","abat","baba","atan"],["baba","abat","baba","atal"]]
Explanation:
The output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).

public class Solution {
    class TrieNode {
        Map<Character, TrieNode> children;
        boolean hasWord;
        Set<String> wordset;
        TrieNode () {
            children = new HashMap<>();
            hasWord = false;
            wordset = new HashSet<>();
        }
    }
    
    public void insert(TrieNode root, String word) {
        // write your code here
        TrieNode cur = root;
        for (char ch : word.toCharArray()) {
            if (!cur.children.containsKey(ch)) {
                cur.children.put(ch, new TrieNode());
            }
            cur = cur.children.get(ch);
            cur.wordset.add(word);
        }
        cur.hasWord = true;
    }

    public Set<String> startsWith(TrieNode root, String prefix) {
        // write your code here
        Set<String> set = new HashSet<>();
        TrieNode cur = root;
        for (char ch : prefix.toCharArray()) {
            if (!cur.children.containsKey(ch)) {
                return set;
            }
            cur = cur.children.get(ch);
        }
        set.addAll(cur.wordset);
        return set;
    }
    
    public List<List<String>> wordSquares(String[] words) {
        // write your code here
        List<List<String>> rst = new ArrayList<List<String>>();
        if (words == null || words.length == 0) {return rst;}
        
        TrieNode root = new TrieNode();
        for (String word : words) {insert(root, word);}
        //for (String s: startsWith(root, "lad")) {System.out.println(s);}
        
        int n = words[0].length();
        List<String> list = new ArrayList<>();
        for (String s: words) {
            list.add(s);
            dfs(rst, n, list,root);
            list.remove(list.size()-1);
        }
        return rst;
    }
    
    void dfs (List<List<String>> rst, int n, List<String> list, TrieNode root) {
        if (list.size() == n) {
            rst.add(new ArrayList<>(list));
            return;
        }
        
        String prefix = getPrefix(list);
        Set<String> nextset = startsWith(root, prefix);
        for (String ss: nextset) {
            list.add(ss);
            dfs(rst, n, list,root);
            list.remove(list.size()-1);
        }
        
    }
    
    String getPrefix(List<String> list) {
        int len = list.size();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < len; i++) {
            sb.append(list.get(i).charAt(len));
        }
        return sb.toString();
    }
}


--K Edit Distance

Given a set of strings which just has lower case letters and a target string, output all the strings for each the edit distance with the target no greater than k.

You have the following 3 operations permitted on a word:

-Insert a character
-Delete a character
-Replace a character

Example
Given words = ["abc", "abd", "abcd", "adc"] and target = "ac", k = 1
Return ["abc", "adc"]

public class Solution {
    /**
     * @param words: a set of stirngs
     * @param target: a target string
     * @param k: An integer
     * @return: output all the strings that meet the requirements
     */
    class TrieNode {
        /* Attributes in Trie */
        public TrieNode[] children;
        public boolean hasWord;
        public String str;
        
        /* Initialize the children and the hasWord */
        public TrieNode() {
            children = new TrieNode[26];
            for (int i = 0; i < 26; ++i)
                children[i] = null;
            hasWord = false;
        }
    
        /* Adds a word into the data structure. */
        public void addWord(TrieNode root, String word) {
            TrieNode now = root; /* Traverse pointer */
    
            for(int i = 0; i < word.length(); i++) { /* traverse every char */
                Character c = word.charAt(i);
                if (now.children[c - 'a'] == null) {
                    now.children[c - 'a'] = new TrieNode(); /* Create new child */
                }
                now = now.children[c - 'a']; /* Or get the child */
            }
            now.str = word; /* The whole word */
            now.hasWord = true; /* Mark the word */
        }
    }
     
    public List<String> kDistance(String[] words, String target, int k) {
        // write your code here
        TrieNode root = new TrieNode(); /* Need a virtual root */
        for (int i = 0; i < words.length; i++)
            root.addWord(root, words[i]); /* Add words to the Trie */

        List<String> result = new ArrayList<String>();

        int n = target.length();

        /* 
            State: dp[i] means walking down the trie from the virtual root to
            the current node, the min edit distance between the formed prefix
            and the target's 0 to ith characters.
         */
        int[] dp = new int[n + 1];
        for (int i = 0; i <= n; ++i)
            dp[i] = i;

        find(root, result, k, target, dp);
        return result;
    }
    
    void find(TrieNode root, List<String> result, int k, String target, int[] dp)
 {
     int n = target.length();
     if (root.hasWord && dp[n] <= k) {
         result.add(root.str);
     }
     
     int[] next = new int[n+1];
     for (int i = 0; i <= n; ++i)
        next[i] = 0;
        
     for (int i = 0; i < 26; i++) {
        if (root.children[i] != null) {
            next[0] = dp[0] + 1;
            for (int j = 1; j <= n; j++) {
                if (target.charAt(j - 1) - 'a' == i) {
                    next[j] = dp[j-1];
                } else {
                    next[j] = Math.min(next[j-1], Math.min(dp[j], dp[j-1])) + 1;
                }
            }
            find(root.children[i], result, k, target, next);
        }
     }
 }
    
}

--Sequence Reconstruction

Check whether the original sequence org can be uniquely reconstructed from the sequences in seqs. The org sequence is a permutation of the integers from 1 to n, with 1 ≤ n ≤ 10^4. Reconstruction means building a shortest common supersequence of the sequences in seqs (i.e., a shortest sequence so that all sequences in seqs are subsequences of it). Determine whether there is only one sequence that can be reconstructed from seqs and it is the org sequence.

Example 1:

Input:org = [1,2,3], seqs = [[1,2],[1,3]]
Output: false
Explanation:
[1,2,3] is not the only one sequence that can be reconstructed, because [1,3,2] is also a valid sequence that can be reconstructed.
Example 2:

Input: org = [1,2,3], seqs = [[1,2]]
Output: false
Explanation:
The reconstructed sequence can only be [1,2].
Example 3:

Input: org = [1,2,3], seqs = [[1,2],[1,3],[2,3]]
Output: true
Explanation:
The sequences [1,2], [1,3], and [2,3] can uniquely reconstruct the original sequence [1,2,3].
Example 4:

Input:org = [4,1,5,2,6,3], seqs = [[5,2,6,3],[4,1,5,2]]
Output:true

public class Solution {
    /**
     * @param org: a permutation of the integers from 1 to n
     * @param seqs: a list of sequences
     * @return: true if it can be reconstructed only one or false
     */
    public boolean sequenceReconstruction(int[] org, int[][] seqs) {
        // write your code here
        if ((org == null || org.length == 0) && (seqs == null || seqs.length == 0 || seqs[0] == null || seqs[0].length == 0)) {return true;}
        if (seqs == null || seqs.length == 0 || seqs[0] == null || seqs[0].length == 0) {return false;}
        
        int n = org.length;
        int[] indegree = new int[n+1];
        Map<Integer, Set<Integer>> map = new HashMap<>();
        Set<Integer> nums = new HashSet<>();
        
        for (int[] seq: seqs) {
            if (seq == null) {continue;}
            if (seq.length == 1) {nums.add(seq[0]); continue;}
            
            for (int i = 1; i < seq.length; i++) {
                if (seq[i-1] > n || seq[i] > n) {return false;}
                nums.add(seq[i-1]);
                nums.add(seq[i]);
                
                if (!map.containsKey(seq[i-1])) {
                    map.put(seq[i-1], new HashSet<Integer>());
                }
                if (!map.get(seq[i-1]).contains(seq[i])) {
                    map.get(seq[i-1]).add(seq[i]);
                    indegree[seq[i]]++;
                }
                
            }
        }
        
        if (nums.size() != n) {return false;}
        
        Queue<Integer> q = new LinkedList<>();
        List<Integer> visited = new ArrayList<>();
        for (int i = 1; i < indegree.length; i++) {
            if (indegree[i] == 0) {
                q.add(i);
                visited.add(i);
            }
        }
        
        while (!q.isEmpty()) {
            int size = q.size();
            if (size > 1) {return false;}
            for (int k = 0; k < size; k++) {
                // for(Integer iii: visited) {System.out.print(iii +"   ");}
                // System.out.println("");
                int cur = q.poll();
                if (!map.containsKey(cur)) {visited.add(cur);continue;}
                for (Integer ii: map.get(cur)) {
                    indegree[ii]--;
                    if (indegree[ii] == 0) {q.add(ii);visited.add(ii);}
                }
            }
        }
        
        for (int i = 0 ; i < org.length; i++) {
            if (org[i] != visited.get(i)) {return false;}
        }
        return true;
    }
}


-- Bomb Enemy

Given a 2D grid, each cell is either a wall 'W', an enemy 'E' or empty '0' (the number zero), return the maximum enemies you can kill using one bomb.
The bomb kills all the enemies in the same row and column from the planted point until it hits the wall since the wall is too strong to be destroyed.


Example1

Input:
grid =[
     "0E00",
     "E0WE",
     "0E00"
]
Output: 3
Explanation:
Placing a bomb at (1,1) kills 3 enemies
Example2

Input:
grid =[
     "0E00",
     "EEWE",
     "0E00"
]
Output: 2
Explanation:
Placing a bomb at (0,0) or (0,3) or (2,0) or (2,3) kills 2 enemies

public class Solution {
    /**
     * @param grid: Given a 2D grid, each cell is either 'W', 'E' or '0'
     * @return: an integer, the maximum enemies you can kill using one bomb
     */
    public int maxKilledEnemies(char[][] grid) {
        // write your code here
        if (grid==null || grid.length==0 || grid[0]==null || grid[0].length==0) {return 0;}
        
        int m = grid.length;
        int n = grid[0].length;
        int[] col = new int[n];
        int row_cnt = 0;
        int res = 0;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                
                if (j == 0 || grid[i][j-1] == 'W') {
                    row_cnt = 0;
                    for (int k = j; k < n && grid[i][k] != 'W'; k++) {
                        row_cnt += (grid[i][k] == 'E' ? 1:0);
                    }
                }
                
                if (i == 0 || grid[i-1][j] == 'W') {
                    col[j] = 0;
                    for (int k = i; k < m && grid[k][j] != 'W'; k++) {
                        col[j] += (grid[k][j] == 'E' ? 1:0);
                    }
                }
                
                if (grid[i][j] == '0') {
                    res = Math.max(res, row_cnt + col[j]);
                }
            }
        }
        
        return res;
    }
}

--Create Maximum Number


Given two arrays of length m and n with digits 0-9 representing two numbers. Create the maximum number of length k <= m + n from digits of the two. The relative order of the digits from the same array must be preserved. Return an array of the k digits. You should try to optimize your time and space complexity.

Example
Given nums1 = [3, 4, 6, 5], nums2 = [9, 1, 2, 5, 8, 3], k = 5
return [9, 8, 6, 5, 3]

Given nums1 = [6, 7], nums2 = [6, 0, 4], k = 5
return [6, 7, 6, 0, 4]

Given nums1 = [3, 9], nums2 = [8, 9], k = 3
return [9, 8, 9]


--Paint Fence
Description
There is a fence with n posts, each post can be painted with one of the k colors.
You have to paint all the posts such that no more than two adjacent fence posts have the same color.
Return the total number of ways you can paint the fence.

n and k are non-negative integers.

Example
Example 1:

Input: n=3, k=2  
Output: 6
Explanation:
          post 1,   post 2, post 3
    way1    0         0       1 
    way2    0         1       0
    way3    0         1       1
    way4    1         0       0
    way5    1         0       1
    way6    1         1       0
Example 2:

Input: n=2, k=2  
Output: 4
Explanation:
          post 1,   post 2
    way1    0         0       
    way2    0         1            
    way3    1         0          
    way4    1         1      

public class Solution {
    /**
     * @param n: non-negative integer, n posts
     * @param k: non-negative integer, k colors
     * @return: an integer, the total number of ways
     */
    public int numWays(int n, int k) {
        // write your code here
        if (k < 1 || n < 1) {return 0;}
        if (n == 1) {return k;}
        if (k ==1) {
            if (n > 2) {return 0;}
            return 1;
        }
        
        int[] dp = new int[n+1];
        dp[1] = k;
        dp[2] = k*k;
        for (int i = 3; i < n+1; i++) {
            dp[i] = (k-1)*dp[i-2] + (k-1)*dp[i-1];
        }
        
        return dp[n];
    }
}

--Stone Game
Description
中文
English
There is a stone game.At the beginning of the game the player picks n piles of stones in a line.

The goal is to merge the stones in one pile observing the following rules:

At each step of the game,the player can merge two adjacent piles to a new pile.
The score is the number of stones in the new pile.
You are to determine the minimum of the total score.

Have you met this question in a real interview?  
Example
Example 1:

Input: [3, 4, 3]
Output: 17
Example 2:

Input: [4, 1, 1, 4]
Output: 18
Explanation:
  1. Merge second and third piles => [4, 2, 4], score = 2
  2. Merge the first two piles => [6, 4]，score = 8
  3. Merge the last two piles => [10], score = 18 

public class Solution {
    /**
     * @param A: An integer array
     * @return: An integer
     */
    public int stoneGame(int[] a) {
        // write your code here
        if (a == null || a.length == 0) {return 0;}
        int n = a.length;
        
        int[][] dp = new int[n][n];
        int[][] sum = new int[n][n];
        
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (j == i) {
                    sum[i][j] = a[i];
                } else {
                    sum[i][j] = sum[i][j-1] + a[j];
                }
            }
        }
        
        for (int len = 2; len <= n; len++) {
            for (int i = 0; i + len -1 < n; i++) {
                int j = i + len -1;
                int min = Integer.MAX_VALUE;
                for (int k = i; k < j; k++) {
                    min = Math.min(dp[i][k] + dp[k+1][j], min);
                }
                dp[i][j] = min + sum[i][j];
            }
        }
        return dp[0][n-1];
    }
}

--Scramble String
Description
中文
English
Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

Below is one possible representation of s1 = "great":

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
We say that "rgeat" is a scrambled string of "great".

Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
We say that "rgtae" is a scrambled string of "great".

Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.

public class Solution {
    /**
     * @param s1: A string
     * @param s2: Another string
     * @return: whether s2 is a scrambled string of s1
     */
    public boolean isScramble(String s1, String s2) {
        // write your code here
        if ((s1 == null && s2 == null) || (s1.length()==0 && s2.length()==0)) {return true;}
        
                  int[] map = new int[26];
        for (int i = 0; i < s1.length(); i++) {
            map[s1.charAt(i) - 'a']++;
            map[s2.charAt(i) - 'a']--;
        }
        for (int i = 0 ;i < 26; i++) {
            if(map[i] != 0) {return false;}
        }
        
        if (s1.equals(s2)) {return true;}
        else {
            if (s1.length() == 1) {return false;}
            else {
                for (int i = 1; i < s1.length(); i++) {
                    // System.out.println("1: " +s1.substring(0,i) +" " + s2.substring(0,i) + " " + s1.substring(i) + " " + s2.substring(i));
                    // System.out.println("2: " + s1.substring(0,i) + " " + s2.substring(s2.length()-i) + " " + s1.substring(i) + " " + s2.substring(0,s2.length()-i));
                    if (  (isScramble(s1.substring(0,i),s2.substring(0,i)) && isScramble(s1.substring(i),s2.substring(i))) || (
                        isScramble(s1.substring(0,i),s2.substring(s2.length()-i)) && isScramble(s1.substring(i),s2.substring(0,s2.length()-i))) ) {return true;}
                }
            }
            return false;
        }
    }
}


--Kth Smallest Number in Sorted Matrix
Description
中文
English
Find the kth smallest number in a row and column sorted matrix.

Each row and each column of the matrix is incremental.

Have you met this question in a real interview?  
Example
Example 1:

Input:
[
  [1 ,5 ,7],
  [3 ,7 ,8],
  [4 ,8 ,9],
]
k = 4
Output: 5
Example 2:

Input:
[
  [1, 2],
  [3, 4]
]
k = 3
Output: 3

public class Solution {
    /**
     * @param matrix: a matrix of integers
     * @param k: An integer
     * @return: the kth smallest number in the matrix
     */
     
    class Cell {
        int x;
        int y;
        int val;
        Cell (int xx, int yy, int vv) {this.x=xx; this.y=yy; this.val=vv;}
    }
    
    public int kthSmallest(int[][] matrix, int k) {
        // write your code here
        int m = matrix.length;
        int n = matrix[0].length;
        boolean[][] visited = new boolean[m][n];
        PriorityQueue<Cell> pq = new  PriorityQueue<Cell>(m*n, new Comparator<Cell>(){
            public int compare(Cell a, Cell b) {return a.val - b.val;}
        });
        
        int[] dx = {0, 1};
        int[] dy = {1, 0};
    
        visited[0][0] = true;
        pq.offer(new Cell(0,0,matrix[0][0]));
        Cell cur = null;
        for (int i = 0; i < k; i++) {
            cur = pq.poll();
            for (int j = 0; j < 2; j++) {
                int nx = cur.x + dx[j];
                int ny = cur.y + dy[j];
                if (nx >= 0 && nx < m && ny >= 0 && ny < n && !visited[nx][ny]) {
                    pq.add(new Cell(nx, ny, matrix[nx][ny]));
                    visited[nx][ny] = true;
                }
            }
        }
        return cur.val;
    }
}

--Valid Number
Description
中文
English
Validate if a given string is numeric.

Have you met this question in a real interview?  
Example
"0" => true

" 0.1 " => true

"abc" => false

"1 a" => false

"2e10" => true

public class Solution {
    /**
     * @param s: the string that represents a number
     * @return: whether the string is a valid number
     */
     
     //true:    _0.3  0.3e5  -0.5e+5  +0.5e+3  -1.3E-10
     public boolean isNumber(String s) {
        // write your code here
        int i = 0;
        s = s.trim() + "";
        char[] c = s.toCharArray();
        int len = s.length();
        if (s.equals("")) {return false;}
        
        if (c[i] == '+' || c[i] == '-') {i++;}
        
        int ndigit = 0, ndot = 0;
        while (i < len && (Character.isDigit(c[i]) || c[i] == '.')) {
            
            if (Character.isDigit(c[i])) {ndigit++;}
            else {ndot++;}
            i++;
        }
        
        if (ndigit <= 0 || ndot > 1) {return false;}
        
        if (i < len &&c[i] == 'e') {
            i++;
            if (c[i] == '+' || c[i] == '-') {
                i++;
            }
            if (i == len+1) {return false;}
            while (i < len) {
                if (!Character.isDigit(c[i])) {return false;}
                i++;
            }
        }
        
        return i==len;
    }
}

--Tower of Hanoi
Description
中文
English
Tower of Hanoi problem, is a well-known problem. On the A, B, C three pillars, there are n disks of different sizes (radii 1-n), they are stacked in a start on A, your goal is to a minimum number of legal steps to move all the plates move from A to C tower tower.
Each step in the rules of the game are as follows:

1.Each step is only allowed to move a plate (from the top of one pillars to the top of another pillars)
2.The process of moving, you must ensure that a large dish is not at the top of the small plates (small can be placed on top of a large, below the maximum plate size can not have any other dish)

public class Solution {
    /**
     * @param n: the number of disks
     * @return: the order of moves
     */
     
    public List<String> towerOfHanoi(int n) {
        // write your code here
        List<String> l = new ArrayList<>();
        help(n, l, 'A','C','B');
        return l;
    }
    
    public void help(int n  , List<String>l, char from, char dest, char buffer){
        if (n<=0) return;
        help(n-1, l, from, buffer, dest);
        l.add("from " + from + " to " + dest);
        help(n-1, l, buffer, dest, from);
    }
}

-- Coins in a Line II
Description
中文
English
There are n coins with different value in a line. Two players take turns to take one or two coins from left side until there are no more coins left. The player who take the coins with the most value wins.

Could you please decide the first player will win or lose?

If the first player wins, return true, otherwise return false.

Have you met this question in a real interview?  
Example
Example 1:

Input: [1, 2, 2]
Output: true
Explanation: The first player takes 2 coins.
Example 2:

Input: [1, 2, 4]
Output: false
Explanation: Whether the first player takes 1 coin or 2, the second player will gain more value.

public class Solution {
    /**
     * @param values: a vector of integers
     * @return: a boolean which equals to true if the first player will win
     */
    public boolean firstWillWin(int[] coins) {
        // write your code here
        if (coins == null || coins.length == 0) {
    		return false;
		} 
		if (coins.length < 3) {
			return true;
		}
		if (coins.length == 3) {
			if (coins[0] + coins[1] < coins[2]) {
				return false;
			}
		}
		int len = coins.length;
		int[] firstMax = new int[len + 1];
		firstMax[len] = 0;
		firstMax[len - 1] = coins[len - 1];
		firstMax[len - 2] = coins[len - 1] + coins[len - 2];
		firstMax[len - 3] = coins[len - 2] + coins[len - 3];
		for (int i = len - 4; i >= 0; i--) {
			int takeOne = Math.min(firstMax[i + 2], firstMax[i + 3]) + coins[i];
			int takeTwo = Math.min(firstMax[i + 3], firstMax[i + 4]) + coins[i] + coins[i + 1];
			firstMax[i] = Math.max(takeOne, takeTwo);
		}
		int sum = 0;
		for (int i = 0; i < len; i++) {
			sum += coins[i];
		}
		return firstMax[0] * 2 > sum;
	}
    
}


