--Median of two Sorted Arrays
Description
中文
English
There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays.

Have you met this question in a real interview?  
Example
Given A=[1,2,3,4,5,6] and B=[2,3,4,5], the median is 3.5.

Given A=[1,2,3] and B=[4,5], the median is 3.

public class Solution {
    /*
     * @param A: An integer array
     * @param B: An integer array
     * @return: a double whose format is *.5 or *.0
     */
    public double findMedianSortedArrays(int[] numsA, int[] numsB) {
        // Assume edge case is safe
        int n = numsA.length + numsB.length;

        // Handle even/odd cases
        if (n % 2 == 0) {
            return (
                findKth(numsA, 0, numsB, 0, n / 2) + 
                findKth(numsA, 0, numsB, 0, n / 2 + 1)
            ) / 2.0;
        }
        return (double)findKth(numsA, 0, numsB, 0, n / 2 + 1);
    }

    // Find kth number in two sorted array. k is size
    private int findKth(int[] numsA, int startA, int[] numsB, int startB, int k) {
        // check edge case for startA/startB index
        if (startA >= numsA.length) return numsB[startB + k - 1]; // A exhausted, take kth in B
        if (startB >= numsB.length) return numsA[startA + k - 1]; // B exhausted, take kth in A

        // handle final condition k == 1. The two elements will be sorted and the smaller one is kth.
        if (k == 1) return Math.min(numsA[startA], numsB[startB]);

        // compare and partition at each [x+(k/2-1)] position
        int halfKthOfA = startA + k / 2 - 1 < numsA.length ? numsA[startA + k / 2 - 1] : Integer.MAX_VALUE;
        int halfKthOfB = startB + k / 2 - 1 < numsB.length ? numsB[startB + k / 2 - 1] : Integer.MAX_VALUE;
        if (halfKthOfA < halfKthOfB) {
            return findKth(numsA, startA + k / 2, numsB, startB, k - k / 2);
        } else {
            return findKth(numsA, startA, numsB, startB + k / 2, k - k / 2);
        }
}
}


--Best Time to Buy and Sell Stock IV
Description
中文
English
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most k transactions.

You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

Have you met this question in a real interview?  
Example
Given prices = [4,4,6,1,1,4,2,5], and k = 2, return 6.

public class Solution {
    /**
     * @param K: An integer
     * @param prices: An integer array
     * @return: Maximum profit
     */
    public int maxProfit(int k, int[] p) {
        // write your code here
        if (k == 0 || p == null || p.length == 0) {return 0;}
        
        if (k >= p.length/2) return helper(p);
        
        int n = p.length;
        int[][] dp = new int[k+1][n];
        
        for (int i = 1; i < k+1; i++) {
            int tmp = -p[0];
            for (int j = 1; j < n; j++) {
                dp[i][j] = Math.max(dp[i][j-1], tmp + p[j]);
                tmp = Math.max(tmp, dp[i-1][j-1] - p[j]);
            }
        }
        return dp[k][n-1];
    }
    
    private int helper(int[] prices) {
        int res = 0;
        for (int i = 1; i < prices.length; i++) {
            if (prices[i] > prices[i-1]) res += prices[i] - prices[i-1];
        }
        return res;
    }
}


--Sliding Window Maximum
Description
中文
English
Given an array of n integer with duplicate number, and a moving window(size k), move the window at each iteration from the start of the array, find the maximum number inside the window at each moving.

Have you met this question in a real interview?  
Example
For array [1, 2, 7, 7, 8], moving window size k = 3. return [7, 7, 8]

At first the window is at the start of the array like this

[|1, 2, 7| ,7, 8] , return the maximum 7;

then the window move one step forward.

[1, |2, 7 ,7|, 8], return the maximum 7;

then the window move one step forward again.

[1, 2, |7, 7, 8|], return the maximum 8;

public class Solution {
    /**
     * @param nums: A list of integers.
     * @param k: An integer
     * @return: The maximum number inside the window at each moving.
     */
    public List<Integer> maxSlidingWindow(int[] nums, int k) {
        // write your code here
        //降序记录index 第一个就是答案！
        
        List<Integer> res = new ArrayList<>();
        if (nums == null || nums.length == 0 || k <= 0) {return res;}
        
        LinkedList<Integer> list = new LinkedList<>();
        
        for (int i = 0; i < nums.length; i++) {
            if (i >= k) {
                if (list.get(0) == i - k) {list.remove(0);}
            }
            
            while (list.size() > 0 && nums[i] > nums[list.get(list.size()-1)]) {
                list.removeLast();
            }
            list.add(i);
            
            if (i >= k-1) {
                res.add(nums[list.get(0)]);
            }
            
        }
        
        return res;
    }
}

--Wildcard Matching
Description
中文
English
Implement wildcard pattern matching with support for '?' and '*'.

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

Have you met this question in a real interview?  
Example
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "*") → true
isMatch("aa", "a*") → true
isMatch("ab", "?*") → true
isMatch("aab", "c*a*b") → false

public class Solution {
    /**
     * @param s: A string 
     * @param p: A string includes "?" and "*"
     * @return: is Match?
     */
    public boolean isMatch(String s, String p) {
        // write your code here
        if (s == null || p == null) {return false;}
        
        int m = s.length(), n = p.length();
        boolean[][] dp = new boolean[m+1][n+1];
        
        dp[0][0] = true;
        for (int i = 1; i < n+1; i++) {
            if (p.charAt(i-1) == '*') {
                dp[0][i] = dp[0][i-1];
            }
        }
        
        for (int i=1; i<=m; i++) {
            for (int j=1; j<=n; j++) {
                if (s.charAt(i-1) == p.charAt(j-1) || p.charAt(j-1) == '?') {
                    dp[i][j] = dp[i-1][j-1];
                } else if (p.charAt(j-1) == '*') {
                    if (j - 1 == 0) {
                        dp[i][j] = dp[i-1][j];
                    } else {
                        if (p.charAt(j-2) == '?') {
                            dp[i][j] = dp[i-1][j-2] || dp[i-1][j];
                        } else {
                            dp[i][j] = dp[i-1][j] || dp[i][j-1];
                        }
                    }
                }
            }
        }
        
        return dp[m][n];
    }
}


--Gas Station
Description
中文
English
There are N gas stations along a circular route, where the amount of gas at station i is gas[i].

You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.

Return the starting gas station's index if you can travel around the circuit once, otherwise return -1.

The solution is guaranteed to be unique.

Have you met this question in a real interview?  
Example
Example 1:

Input:gas[i]=[1,1,3,1],cost[i]=[2,2,1,1]
Output:2
Example 2:

Input:gas[i]=[1,1,3,1],cost[i]=[2,2,10,1]
Output:-1

public class Solution {
    /**
     * @param gas: An array of integers
     * @param cost: An array of integers
     * @return: An integer
     */
    public int canCompleteCircuit(int[] gas, int[] cost) {
        // write your code here
        //http://bookshadow.com/weblog/2015/08/06/leetcode-gas-station/
        int gas_sum = 0, cost_sum = 0;
        int sum = 0, index = 0;
        
        for (int i = 0; i < gas.length; i++) {
            sum += (gas[i] - cost[i]);
            if (sum < 0) {
                index = i+1;
                sum = 0;
            }
            gas_sum += gas[i];
            cost_sum += cost[i];
        }
        
        return gas_sum >= cost_sum ? index : -1;
    }
}

--Regular Expression Matching
Description
中文
English
Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).


The function prototype should be:

bool isMatch(string s, string p)

Have you met this question in a real interview?  
Example
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "a*") → true
isMatch("aa", ".*") → true
isMatch("ab", ".*") → true
isMatch("aab", "c*a*b") → true

public class Solution {
    /**
     * @param s: A string 
     * @param p: A string includes "." and "*"
     * @return: A boolean
     */
    public boolean isMatch(String s, String p) {
        // write your code here
        if (s==null || p == null || (s.length()==0 && p.length()>0) || (s.length()>0 && p.length()==0)) {return false;}
        
        int m = s.length(), n = p.length();
        boolean[][] dp = new boolean[m+1][n+1];
        
        dp[0][0] = true;
        for (int i = 1; i <= n; i++) {
            if (p.charAt(i-1) == '*') {
                if (i-2>=0 && dp[0][i-2]) {dp[0][i]=true;}
            }
        }
        // for (int i = 0; i <= m; i++) {
        //     System.out.println("");
        //     for (int j = 0; j <= n; j++) {
        //         System.out.print(dp[i][j] + "  ");
        //     }
        // }
        
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (p.charAt(j-1) == '.' || p.charAt(j-1)==s.charAt(i-1)) {
                    dp[i][j] = dp[i-1][j-1];
                } else if (p.charAt(j-1) == '*') {
                    if (j > 1) {
                        if ((s.charAt(i-1) == p.charAt(j-2) || p.charAt(j-2)=='.' )) {
                            dp[i][j] = dp[i][j-1] || dp[i-1][j] || dp[i][j-2];
                        } else {
                           dp[i][j] = dp[i][j-2];
                        }
                    } else {
                        dp[i][j] = false;
                    }
                    
                }
            }
        }
        
        // for (int i = 0; i <= m; i++) {
        //     System.out.println("");
        //     for (int j = 0; j <= n; j++) {
        //         System.out.print(dp[i][j] + "  ");
        //     }
        // }
        
        return dp[m][n];
    }
}


--Sort Colors
Description
中文
English
Given an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

You are not suppose to use the library's sort function for this problem.
You should do it in-place (sort numbers in the original array).

Have you met this question in a real interview?  
Example
Given [1, 0, 1, 2], sort it in-place to [0, 1, 1, 2].


class Solution {
    /**
     * @param nums: A list of integer which is 0, 1 or 2 
     * @return: nothing
     */
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    
    public void sortColors(int[] nums) {
        
        if (nums == null || nums.length < 2) {
            return;
        }
        int first = 0;
        int second = nums.length - 1;
        
        int i = first;
        
        while (i <= second) {
            if (nums[i] == 0) {
                
                    swap(nums, i++, first++);
                
                
            } else if (nums[i] == 2) {
                swap(nums, i, second--);
            } else {
                i++;
            }
        }
    }
}

--Interleaving Positive and Negative Numbers
Description
中文
English
Given an array with positive and negative integers. Re-range it to interleaving with positive and negative integers.

You are not necessary to keep the original order of positive integers or negative integers.

Have you met this question in a real interview?  
Example
Given [-1, -2, -3, 4, 5, 6], after re-range, it will be [-1, 5, -2, 4, -3, 6] or any other reasonable answer.

public class Solution {
    /*
     * @param A: An integer array.
     * @return: nothing
     */
    public void rerange(int[] a) {
        // write your code here
        if (a == null || a.length <= 2) {return;}
        
        int minus = 0, plus = 0;
        for (int i = 0; i < a.length; i++) {
            if (a[i] > 0) {plus++;}
            else {minus++;}
        }
        
        int negIdx, posIdx;
        if (minus > plus) {
            negIdx = 0;
            posIdx = 1;
        } else {
            negIdx = 1;
            posIdx = 0;
        }
        
        while (negIdx < a.length || posIdx < a.length) {
            while (negIdx < a.length && a[negIdx] < 0) {negIdx += 2;}
            while (posIdx < a.length && a[posIdx] > 0) {posIdx += 2;}
            if (negIdx < a.length && posIdx < a.length) {
                int tmp = a[negIdx];
                a[negIdx] = a[posIdx];
                a[posIdx] = tmp;
            }
            //System.out.println("neg: " + negIdx + "  " + "pos: " + posIdx);
        }
        
        return;
    }
}

--Word Search II
Description
中文
English
Given a matrix of lower alphabets and a dictionary. Find all words in the dictionary that can be found in the matrix. A word can start from any position in the matrix and go left/right/up/down to the adjacent position. One character only be used once in one word. No same word in dictionary

Have you met this question in a real interview?  
Example
Given matrix:

doaf
agai
dcan
and dictionary:

{"dog", "dad", "dgdg", "can", "again"}

return {"dog", "dad", "can", "again"}


dog:
doaf
agai
dcan
dad:

doaf
agai
dcan
can:

doaf
agai
dcan
again:

doaf
agai
dcan

public class Solution {
    /**
     * @param board: A list of lists of character
     * @param words: A list of string
     * @return: A list of string
     */
    class TrieNode {
        Map<Character, TrieNode> children;
        boolean hasWord;
        TrieNode() {
            children = new HashMap<>();
            hasWord = false;
        }
    }
    
    void insert(TrieNode root, String s) {
        TrieNode node = root;
        for (char ch: s.toCharArray()) {
            if (!node.children.containsKey(ch)) {
                node.children.put(ch, new TrieNode());
            }
            node = node.children.get(ch);
        }
        node.hasWord = true;
    }
    
    boolean hasWord(TrieNode root, String s) {
        TrieNode node = root;
        for (char ch: s.toCharArray()) {
            if (!node.children.containsKey(ch)) {
                return false;
            }
            node = node.children.get(ch);
        }
        return node.hasWord;
    }
    
    boolean startWith(TrieNode root, String s) {
        TrieNode node = root;
        for (char ch: s.toCharArray()) {
            if (!node.children.containsKey(ch)) {
                return false;
            }
            node = node.children.get(ch);
        }
        return true;
    }
    
    public List<String> wordSearchII(char[][] board, List<String> words) {
        // write your code here
        Set<String> rst = new HashSet<>();
        if (board == null || board.length == 0 || board[0] == null || board[0].length == 0 || words == null || words.size() == 0) {return new ArrayList<String>(rst);}
        
        int m = board.length;
        int n = board[0].length;
        
        TrieNode root = new TrieNode();
        for (String s: words) {insert(root, s);}
        
        boolean[][] visited = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                
                dfs(board, i, j, visited, root, "", rst);
            }
        }
        return new ArrayList<String>(rst);
    }
    
    int[] dx = {-1, 0, 0, 1};
    int[] dy = {0, -1, 1, 0};
    void dfs(char[][] board, int x, int y, boolean[][] visited, TrieNode root, String s, Set<String> rst) {
        int m = board.length;
        int n = board[0].length;
        if (x < 0 || x >= m || y < 0 || y >= n || visited[x][y]) {return;}
        
        if(root.children.get(board[x][y]) == null){
            return;
        }
        root = root.children.get(board[x][y]);
        if (root.hasWord) {
            rst.add(s + board[x][y]);
        }
        
        visited[x][y] = true;
        for (int i = 0; i < 4; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            dfs(board, nx, ny, visited, root, s+ board[x][y], rst);
        }    
        visited[x][y] = false;
        
        
    }
}


--Topological Sorting
Description
中文
English
Given an directed graph, a topological order of the graph nodes is defined as follow:

For each directed edge A -> B in graph, A must before B in the order list.
The first node in the order can be any node in the graph with no nodes direct to it.
Find any topological order for the given graph.

public class Solution {
    /*
     * @param graph: A list of Directed graph node
     * @return: Any topological order for the given graph.
     */
    public ArrayList<DirectedGraphNode> topSort(ArrayList<DirectedGraphNode> graph) {
        // write your code here
        ArrayList<DirectedGraphNode> res = new ArrayList<>();
        if (graph == null || graph.size() == 0) {return res;}
        
        Map<DirectedGraphNode, Integer> indegree = new HashMap<>();
        Map<DirectedGraphNode, ArrayList<DirectedGraphNode>> neighbors = new HashMap<>();
        
        for (DirectedGraphNode node : graph) {
            neighbors.put(node, node.neighbors);
            for (DirectedGraphNode neighbor: node.neighbors) {
                indegree.put(neighbor, indegree.getOrDefault(neighbor, 0) + 1);
            }
        }
        
        ArrayList<DirectedGraphNode> root = new ArrayList<>();
        for (Map.Entry<DirectedGraphNode, Integer> entry: indegree.entrySet()) {
            //System.out.println(entry.getValue());
            if (entry.getValue() == 0) {
                root.add(entry.getKey());
                //System.out.println(entry.getKey().label);
            }
        }
        
        Queue<DirectedGraphNode> q = new LinkedList<>();
        for (DirectedGraphNode node: graph) {
            if (!indegree.containsKey(node) || indegree.get(node) == 0) {
                q.add(node);
            }
        }
        
        
        while (!q.isEmpty()) {
            List<DirectedGraphNode> list = new ArrayList<>();
            while (!q.isEmpty()) {
                list.add(q.poll());
            }
            for (DirectedGraphNode node: list) {
                res.add(node);
                for (DirectedGraphNode neigbor: neighbors.get(node)) {
                    indegree.put(neigbor, indegree.get(neigbor)-1);
                    if (indegree.get(neigbor) == 0) {
                        q.add(neigbor);
                    }
                }
            }
        }
        
        
        return res;
    }
}


--Word Break
Description
中文
English
Given a string s and a dictionary of words dict, determine if s can be break into a space-separated sequence of one or more dictionary words.

Have you met this question in a real interview?  
Example
Example 1:
	Input:  "lintcode", ["lint", "code"]
	Output:  true

Example 2:
	Input: "a", ["a"]
	Output:  true
	

public class Solution {
    /*
     * @param s: A string
     * @param dict: A dictionary of words dict
     * @return: A boolean
     */
    public boolean wordBreak(String s, Set<String> dict) {
        // write your code here
        if (s == null) {return false;}
        if (s.length()==0 && (dict == null || dict.size()==0)) {return true;}
        
        int n = s.length();
        int longest = 0;
        for (String str : dict) {
            longest = Math.max(str.length(), longest);
        }
        boolean[] dp = new boolean[n+1];
        dp[0] = true;
        
        for (int i = 1; i <= n; i++) {
            for (int j = i-1; j >= 0; j--) {
                if (i - j > longest) {
                    break;
                }
                if (dp[j]) {
                    dp[i] |= dict.contains(s.substring(j, i));
                }
            }
        }
        
        return dp[n];
        // List<Integer> list = new ArrayList<>();
        // list.add(0);
        // for (int i = 1; i <= n; i++) {
        //     boolean tmp = false;
            
        //     for (Integer j: list) {
        //         if (i-j+1 > longest) {break;}
        //         tmp |= dict.contains(s.substring(j, i));
        //     }
        //     if (tmp == true) {list.add(i);}
        // }
        
        // return list.get(list.size()-1) == n;
    }
}


-- Minimum Adjustment Cost
Description
中文
English
Given an integer array, adjust each integers so that the difference of every adjacent integers are not greater than a given number target.

If the array before adjustment is A, the array after adjustment is B, you should minimize the sum of |A[i]-B[i]|

You can assume each number in the array is a positive integer and not greater than 100.

Have you met this question in a real interview?  
Example
Example 1:
	Input:  [1,4,2,3], target=1
	Output:  2

Example 2:
	Input:  [3,5,4,7], target=2
	Output:  1

public class Solution {
    /*
     * @param A: An integer array
     * @param target: An integer
     * @return: An integer
     */
    public int MinAdjustmentCost(List<Integer> A, int target) {
        // write your code here
        if (A == null || A.size() == 0) {return 0;}
        
        int n = A.size();
        
        int[][] dp = new int[n+1][101];
        
        for (int i = 1; i <= 100; i++) {dp[1][i] = Math.abs(A.get(0) - i);}
        
        for (int i = 2; i <= n; i++) {
            for (int k = 1; k <= 100; k++) {
                dp[i][k] = Integer.MAX_VALUE;
                for (int j = 1; j <= 100; j++) {
                    if (Math.abs(j-k) <= target) {
                        dp[i][k] = Math.min(dp[i][k], dp[i-1][j] + Math.abs(A.get(i-1)-k));
                    }
                }
            }
        }
        
        int min = Integer.MAX_VALUE;
        for(int i = 1; i <= 100; i++){
            min = Math.min(min, dp[n][i]);
        }

        return min;
    }
}

